import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import threading
import os
import sys
import subprocess
import time
from datetime import datetime
from pathlib import Path

class EventProcessorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π v1.0")
        self.root.geometry("700x480")  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 850x600
        self.root.minsize(650, 420)    # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 750x500
        self.root.resizable(True, True)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–°–ù–ê–ß–ê–õ–ê –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ!)
        self.base_dir = Path.cwd()
        self.scripts = {
            '1': {
                'name': '1.docxtocsv.ipynb',
                'description': 'üìÑ DOCX ‚Üí CSV',
                'details': '–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏–∑ DOCX –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏'
            },
            '2': {
                'name': '3.kod_tipovogo.ipynb', 
                'description': 'üî§ –ö–æ–¥—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
                'details': '–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –∫–æ–¥–∞–º–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞'
            },
            '3': {
                'name': '4.dopobrabokta.ipynb',
                'description': 'üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞',
                'details': '–°–æ–∑–¥–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Excel —Ñ–∞–π–ª—ã –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º'
            }
        }
        
        # –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.processing = False
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–ü–û–°–õ–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö!)
        self.create_widgets()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        self.root.after(100, self.check_all_files)

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
        style.configure('Title.TLabel', font=('Segoe UI', 16, 'bold'), foreground='#2c3e50')
        style.configure('Header.TLabel', font=('Segoe UI', 10, 'bold'), foreground='#34495e')
        style.configure('Success.TLabel', foreground='#27ae60', font=('Segoe UI', 9))
        style.configure('Error.TLabel', foreground='#e74c3c', font=('Segoe UI', 9))
        style.configure('Warning.TLabel', foreground='#f39c12', font=('Segoe UI', 9))
        style.configure('Big.TButton', font=('Segoe UI', 10, 'bold'), padding=(8, 6))
        style.configure('Small.TButton', font=('Segoe UI', 9), padding=(4, 2))

    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –º–µ–Ω—å—à–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        main_frame = ttk.Frame(self.root, padding="8")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(main_frame)
        title_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 8))
        
        title_label = ttk.Label(title_frame, text="üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", style='Title.TLabel')
        title_label.pack()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
        status_frame = ttk.LabelFrame(main_frame, text="üìÅ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", padding="6")
        status_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 8))
        status_frame.columnconfigure(0, weight=1)
        
        # –°—Ç–∞—Ç—É—Å notebook —Ñ–∞–π–ª–æ–≤
        self.nb_status_label = ttk.Label(status_frame, text="üìì Notebook —Ñ–∞–π–ª—ã: –ü—Ä–æ–≤–µ—Ä–∫–∞...", 
                                        font=('Segoe UI', 9), style='Header.TLabel')
        self.nb_status_label.grid(row=0, column=0, sticky=tk.W)
        
        self.nb_files_label = ttk.Label(status_frame, text="", 
                                       font=('Segoe UI', 8))
        self.nb_files_label.grid(row=1, column=0, sticky=tk.W, padx=(15, 0))
        
        # –°—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤  
        self.input_status_label = ttk.Label(status_frame, text="üìÑ –í—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã:", 
                                           font=('Segoe UI', 9), style='Header.TLabel')
        self.input_status_label.grid(row=2, column=0, sticky=tk.W, pady=(4, 0))
        
        self.input_files_label = ttk.Label(status_frame, text="", 
                                          font=('Segoe UI', 8))
        self.input_files_label.grid(row=3, column=0, sticky=tk.W, padx=(15, 0))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ
        actions_frame = ttk.LabelFrame(main_frame, text="üöÄ –î–µ–π—Å—Ç–≤–∏—è", padding="6")
        actions_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(0, 8))
        actions_frame.columnconfigure(0, weight=1)
        
        # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        self.full_process_btn = ttk.Button(actions_frame, text="üéØ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", 
                                          command=self.start_full_process, style='Big.TButton')
        self.full_process_btn.pack(fill=tk.X, pady=(0, 6))
        
        # –ö–Ω–æ–ø–∫–∏ —ç—Ç–∞–ø–æ–≤ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä—è–¥—É
        stages_frame = ttk.Frame(actions_frame)
        stages_frame.pack(fill=tk.X, pady=(2, 0))
        
        self.stage_buttons = {}
        for i, (num, info) in enumerate(self.scripts.items()):
            btn = ttk.Button(stages_frame, text=info['description'], 
                           command=lambda n=num: self.start_single_stage(n),
                           style='Small.TButton')
            btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 2) if i < len(self.scripts)-1 else 0)
            self.stage_buttons[num] = btn
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        extra_frame = ttk.Frame(actions_frame)
        extra_frame.pack(fill=tk.X, pady=(6, 0))
        
        ttk.Button(extra_frame, text="üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", 
                  command=self.open_results, style='Small.TButton').pack(side=tk.LEFT, padx=(0, 4))
        
        ttk.Button(extra_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                  command=self.cleanup_files, style='Small.TButton').pack(side=tk.LEFT, padx=(0, 4))
        
        ttk.Button(extra_frame, text="‚ùì –°–ø—Ä–∞–≤–∫–∞", 
                  command=self.show_help, style='Small.TButton').pack(side=tk.LEFT)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_frame = ttk.LabelFrame(main_frame, text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", padding="6")
        progress_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(0, 8))
        progress_frame.columnconfigure(0, weight=1)
        
        self.status_label = ttk.Label(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", font=('Segoe UI', 9))
        self.status_label.grid(row=0, column=0, sticky=tk.W)
        
        self.progress_bar = ttk.Progressbar(progress_frame, mode='indeterminate')
        self.progress_bar.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(4, 0))
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ª–æ–≥
        log_frame = ttk.LabelFrame(main_frame, text="üìã –õ–æ–≥", padding="6")
        log_frame.grid(row=4, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 0))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(4, weight=1)
        
        # –£–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É –ª–æ–≥–∞ —Å 10 –¥–æ 6
        self.log_text = scrolledtext.ScrolledText(log_frame, height=6, width=70, 
                                                 font=('Consolas', 8), wrap=tk.WORD)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª–æ–≥–∞
        log_buttons = ttk.Frame(log_frame)
        log_buttons.grid(row=1, column=0, sticky=tk.W, pady=(6, 0))
        
        ttk.Button(log_buttons, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.save_log, style='Small.TButton').pack(side=tk.LEFT, padx=(0, 4))
        
        ttk.Button(log_buttons, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                  command=self.clear_log, style='Small.TButton').pack(side=tk.LEFT)

    def log_message(self, message, level="INFO"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        level_icon = {"INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "ERROR": "‚ùå", "WARNING": "‚ö†Ô∏è"}.get(level, "üìù")
        formatted_message = f"[{timestamp}] {level_icon} {message}\n"
        
        self.log_text.insert(tk.END, formatted_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()

    def check_script_exists(self, script_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞"""
        return (self.base_dir / script_name).exists()

    def check_all_files(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º notebook —Ñ–∞–π–ª—ã
        nb_files_status = []
        all_nb_ok = True
        
        for script_info in self.scripts.values():
            if self.check_script_exists(script_info['name']):
                nb_files_status.append(f"‚úÖ {script_info['name']}")
            else:
                nb_files_status.append(f"‚ùå {script_info['name']}")
                all_nb_ok = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
        input_files = ['test.docx', 'kod_tipovogo.xlsx']
        input_files_status = []
        
        for file in input_files:
            if (self.base_dir / file).exists():
                input_files_status.append(f"‚úÖ {file}")
            else:
                input_files_status.append(f"‚ö†Ô∏è {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª—ã
        nb_status_text = "Notebook —Ñ–∞–π–ª—ã:" if all_nb_ok else "Notebook —Ñ–∞–π–ª—ã: (–µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)"
        self.nb_status_label.configure(text=f"üìì {nb_status_text}")
        self.nb_files_label.configure(text="  ‚Ä¢  ".join(nb_files_status))
        
        self.input_status_label.configure(text="üìÑ –í—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        self.input_files_label.configure(text="  ‚Ä¢  ".join(input_files_status))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if all_nb_ok:
            self.log_message("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!", "SUCCESS")
        else:
            self.log_message("–í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", "WARNING")

    def set_processing_state(self, processing):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.processing = processing
        
        if processing:
            self.full_process_btn.configure(state='disabled', text="‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            for btn in self.stage_buttons.values():
                btn.configure(state='disabled')
            self.progress_bar.start()
        else:
            self.full_process_btn.configure(state='normal', text="üéØ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
            for btn in self.stage_buttons.values():
                btn.configure(state='normal')
            self.progress_bar.stop()

    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        self.status_label.configure(text=message)
        self.log_message(message)

    def run_notebook(self, notebook_name, description):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç notebook"""
        self.update_status(f"–ó–∞–ø—É—Å–∫: {description}")
        
        start_time = time.time()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º notebook —á–µ—Ä–µ–∑ jupyter nbconvert
            result = subprocess.run([
                'jupyter', 'nbconvert', '--execute', '--to', 'notebook', 
                '--inplace', str(self.base_dir / notebook_name)
            ], capture_output=True, text=True, cwd=self.base_dir, timeout=600)
            
            elapsed_time = time.time() - start_time
            
            if result.returncode == 0:
                self.log_message(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed_time:.1f} —Å–µ–∫", "SUCCESS")
                return True
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ {description}: {result.stderr}", "ERROR")
                return False
                
        except subprocess.TimeoutExpired:
            self.log_message(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {description}", "ERROR")
            return False
        except FileNotFoundError:
            self.log_message("‚ùå Jupyter –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install jupyter", "ERROR")
            return False
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", "ERROR")
            return False

    def start_full_process(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        if self.processing:
            return
        
        def process_thread():
            try:
                self.set_processing_state(True)
                self.update_status("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                
                successful = 0
                total = len(self.scripts)
                
                for num, script_info in self.scripts.items():
                    self.update_status(f"üìã –≠—Ç–∞–ø {num}/{total}: {script_info['description']}")
                    
                    if self.run_notebook(script_info['name'], script_info['description']):
                        successful += 1
                    else:
                        break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
                    time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
                
                if successful == total:
                    self.update_status("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    self.root.after(0, lambda: messagebox.showinfo(
                        "–£—Å–ø–µ—Ö!", 
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ '4.excel_final'"
                    ))
                else:
                    self.update_status(f"‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏ ({successful}/{total})")
                
            except Exception as e:
                self.log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}"))
            
            finally:
                self.root.after(0, lambda: self.set_processing_state(False))
                self.root.after(0, lambda: self.update_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"))
        
        threading.Thread(target=process_thread, daemon=True).start()

    def start_single_stage(self, stage_num):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø"""
        if self.processing:
            return
        
        script_info = self.scripts[stage_num]
        
        def stage_thread():
            try:
                self.set_processing_state(True)
                
                if self.run_notebook(script_info['name'], script_info['description']):
                    self.root.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", f"–≠—Ç–∞–ø {stage_num} –∑–∞–≤–µ—Ä—à–µ–Ω!"))
                else:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ {stage_num}"))
                
            except Exception as e:
                self.log_message(f"üí• –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ {stage_num}: {e}", "ERROR")
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}"))
            
            finally:
                self.root.after(0, lambda: self.set_processing_state(False))
                self.root.after(0, lambda: self.update_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"))
        
        threading.Thread(target=stage_thread, daemon=True).start()

    def open_results(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        results_dir = self.base_dir / "4.excel_final"
        if results_dir.exists():
            if sys.platform.startswith('win'):
                os.startfile(results_dir)
            elif sys.platform.startswith('darwin'):
                subprocess.run(['open', str(results_dir)])
            else:
                subprocess.run(['xdg-open', str(results_dir)])
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def cleanup_files(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        temp_items = ["split_events", "excel_events", "1.courses_data.csv", 
                     "1.reordered_file.csv", "3.new_code.csv"]
        
        cleaned = 0
        for item in temp_items:
            item_path = self.base_dir / item
            try:
                if item_path.is_dir():
                    import shutil
                    shutil.rmtree(item_path)
                    cleaned += 1
                elif item_path.is_file():
                    item_path.unlink()
                    cleaned += 1
            except Exception:
                pass
        
        if cleaned > 0:
            self.log_message(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {cleaned} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", "SUCCESS")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—á–∏—â–µ–Ω–æ {cleaned} —Ñ–∞–π–ª–æ–≤")
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    def save_log(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –≤ —Ñ–∞–π–ª"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥"
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.log_text.get(1.0, tk.END))
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        self.log_text.delete(1.0, tk.END)

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """üöÄ –°–ü–†–ê–í–ö–ê

üìã –≠–¢–ê–ü–´:
1Ô∏è‚É£ DOCX ‚Üí CSV: –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
2Ô∏è‚É£ –ö–æ–¥—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º  
3Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª—ã

üìÅ –§–ê–ô–õ–´:
‚Ä¢ test.docx - —Ç–∞–±–ª–∏—Ü–∞ –∫—É—Ä—Å–æ–≤
‚Ä¢ kod_tipovogo.xlsx - —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ–¥–æ–≤

üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–∞–ø–∫–∞ 4.excel_final/
        """
        
        messagebox.showinfo("–°–ø—Ä–∞–≤–∫–∞", help_text)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    root = tk.Tk()
    app = EventProcessorGUI(root)
    
    try:
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        app.log_message("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!", "SUCCESS")
        
        root.mainloop()
    except KeyboardInterrupt:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()